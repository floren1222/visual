package zenith.zov.utility.render.display;

import lombok.AllArgsConstructor;

import net.minecraft.client.MinecraftClient;
import net.minecraft.client.util.InputUtil;
import org.lwjgl.glfw.GLFW;

import java.util.HashMap;
import java.util.Map;

@AllArgsConstructor
public enum Keyboard {
    KEY_SPACE("SPACE", GLFW.GLFW_KEY_SPACE),
    KEY_APOSTROPHE("APOSTROPHE", GLFW.GLFW_KEY_APOSTROPHE),
    KEY_COMMA("COMMA", GLFW.GLFW_KEY_COMMA),
    KEY_MINUS("MINUS", GLFW.GLFW_KEY_MINUS),
    KEY_PERIOD("PERIOD", GLFW.GLFW_KEY_PERIOD),
    KEY_SLASH("SLASH", GLFW.GLFW_KEY_SLASH),
    KEY_0("0", GLFW.GLFW_KEY_0),
    KEY_1("1", GLFW.GLFW_KEY_1),
    KEY_2("2", GLFW.GLFW_KEY_2),
    KEY_3("3", GLFW.GLFW_KEY_3),
    KEY_4("4", GLFW.GLFW_KEY_4),
    KEY_5("5", GLFW.GLFW_KEY_5),
    KEY_6("6", GLFW.GLFW_KEY_6),
    KEY_7("7", GLFW.GLFW_KEY_7),
    KEY_8("8", GLFW.GLFW_KEY_8),
    KEY_9("9", GLFW.GLFW_KEY_9),
    KEY_SEMICOLON("SEMICOLON", GLFW.GLFW_KEY_SEMICOLON),
    KEY_EQUAL("EQUAL", GLFW.GLFW_KEY_EQUAL),
    KEY_A("A", GLFW.GLFW_KEY_A),
    KEY_B("B", GLFW.GLFW_KEY_B),
    KEY_C("C", GLFW.GLFW_KEY_C),
    KEY_D("D", GLFW.GLFW_KEY_D),
    KEY_E("E", GLFW.GLFW_KEY_E),
    KEY_F("F", GLFW.GLFW_KEY_F),
    KEY_G("G", GLFW.GLFW_KEY_G),
    KEY_H("H", GLFW.GLFW_KEY_H),
    KEY_I("I", GLFW.GLFW_KEY_I),
    KEY_J("J", GLFW.GLFW_KEY_J),
    KEY_K("K", GLFW.GLFW_KEY_K),
    KEY_L("L", GLFW.GLFW_KEY_L),
    KEY_M("M", GLFW.GLFW_KEY_M),
    KEY_N("N", GLFW.GLFW_KEY_N),
    KEY_O("O", GLFW.GLFW_KEY_O),
    KEY_P("P", GLFW.GLFW_KEY_P),
    KEY_Q("Q", GLFW.GLFW_KEY_Q),
    KEY_R("R", GLFW.GLFW_KEY_R),
    KEY_S("S", GLFW.GLFW_KEY_S),
    KEY_T("T", GLFW.GLFW_KEY_T),
    KEY_U("U", GLFW.GLFW_KEY_U),
    KEY_V("V", GLFW.GLFW_KEY_V),
    KEY_W("W", GLFW.GLFW_KEY_W),
    KEY_X("X", GLFW.GLFW_KEY_X),
    KEY_Y("Y", GLFW.GLFW_KEY_Y),
    KEY_Z("Z", GLFW.GLFW_KEY_Z),
    KEY_LEFT_BRACKET("LEFT_BRACKET", GLFW.GLFW_KEY_LEFT_BRACKET),
    KEY_BACKSLASH("BACKSLASH", GLFW.GLFW_KEY_BACKSLASH),
    KEY_RIGHT_BRACKET("RIGHT_BRACKET", GLFW.GLFW_KEY_RIGHT_BRACKET),
    KEY_GRAVE_ACCENT("GRAVE_ACCENT", GLFW.GLFW_KEY_GRAVE_ACCENT),

    KEY_ESCAPE("ESCAPE", GLFW.GLFW_KEY_ESCAPE),
    KEY_ENTER("ENTER", GLFW.GLFW_KEY_ENTER),
    KEY_TAB("TAB", GLFW.GLFW_KEY_TAB),
    KEY_BACKSPACE("BACKSPACE", GLFW.GLFW_KEY_BACKSPACE),
    KEY_INSERT("INSERT", GLFW.GLFW_KEY_INSERT),
    KEY_DELETE("DELETE", GLFW.GLFW_KEY_DELETE),
    KEY_RIGHT("RIGHT", GLFW.GLFW_KEY_RIGHT),
    KEY_LEFT("LEFT", GLFW.GLFW_KEY_LEFT),
    KEY_DOWN("DOWN", GLFW.GLFW_KEY_DOWN),
    KEY_UP("UP", GLFW.GLFW_KEY_UP),

    KEY_CAPS_LOCK("CAPS_LOCK", GLFW.GLFW_KEY_CAPS_LOCK),
    KEY_SCROLL_LOCK("SCROLL_LOCK", GLFW.GLFW_KEY_SCROLL_LOCK),
    KEY_NUM_LOCK("NUM_LOCK", GLFW.GLFW_KEY_NUM_LOCK),
    KEY_PRINT_SCREEN("PRINT_SCREEN", GLFW.GLFW_KEY_PRINT_SCREEN),
    KEY_PAUSE("PAUSE", GLFW.GLFW_KEY_PAUSE),

    KEY_F1("F1", GLFW.GLFW_KEY_F1),
    KEY_F2("F2", GLFW.GLFW_KEY_F2),
    KEY_F3("F3", GLFW.GLFW_KEY_F3),
    KEY_F4("F4", GLFW.GLFW_KEY_F4),
    KEY_F5("F5", GLFW.GLFW_KEY_F5),
    KEY_F6("F6", GLFW.GLFW_KEY_F6),
    KEY_F7("F7", GLFW.GLFW_KEY_F7),
    KEY_F8("F8", GLFW.GLFW_KEY_F8),
    KEY_F9("F9", GLFW.GLFW_KEY_F9),
    KEY_F10("F10", GLFW.GLFW_KEY_F10),
    KEY_F11("F11", GLFW.GLFW_KEY_F11),
    KEY_F12("F12", GLFW.GLFW_KEY_F12),

    KEY_KP_0("NUMPAD_0", GLFW.GLFW_KEY_KP_0),
    KEY_KP_1("NUMPAD_1", GLFW.GLFW_KEY_KP_1),
    KEY_KP_2("NUMPAD_2", GLFW.GLFW_KEY_KP_2),
    KEY_KP_3("NUMPAD_3", GLFW.GLFW_KEY_KP_3),
    KEY_KP_4("NUMPAD_4", GLFW.GLFW_KEY_KP_4),
    KEY_KP_5("NUMPAD_5", GLFW.GLFW_KEY_KP_5),
    KEY_KP_6("NUMPAD_6", GLFW.GLFW_KEY_KP_6),
    KEY_KP_7("NUMPAD_7", GLFW.GLFW_KEY_KP_7),
    KEY_KP_8("NUMPAD_8", GLFW.GLFW_KEY_KP_8),
    KEY_KP_9("NUMPAD_9", GLFW.GLFW_KEY_KP_9),
    KEY_KP_DECIMAL("NUMPAD_DECIMAL", GLFW.GLFW_KEY_KP_DECIMAL),
    KEY_KP_DIVIDE("NUMPAD_DIVIDE", GLFW.GLFW_KEY_KP_DIVIDE),
    KEY_KP_MULTIPLY("NUMPAD_MULTIPLY", GLFW.GLFW_KEY_KP_MULTIPLY),
    KEY_KP_SUBTRACT("NUMPAD_SUBTRACT", GLFW.GLFW_KEY_KP_SUBTRACT),
    KEY_KP_ADD("NUMPAD_ADD", GLFW.GLFW_KEY_KP_ADD),
    KEY_KP_ENTER("NUMPAD_ENTER", GLFW.GLFW_KEY_KP_ENTER),
    KEY_KP_EQUAL("NUMPAD_EQUAL", GLFW.GLFW_KEY_KP_EQUAL),

    KEY_LEFT_SUPER("LEFT_SUPER", GLFW.GLFW_KEY_LEFT_SUPER),
    KEY_RIGHT_SUPER("RIGHT_SUPER", GLFW.GLFW_KEY_RIGHT_SUPER),
    KEY_MENU("MENU", GLFW.GLFW_KEY_MENU),
    KEY_WORLD_1("WORLD_1", GLFW.GLFW_KEY_WORLD_1),
    KEY_WORLD_2("WORLD_2", GLFW.GLFW_KEY_WORLD_2),

    KEY_LEFT_SHIFT("LEFT_SHIFT", GLFW.GLFW_KEY_LEFT_SHIFT),
    KEY_LEFT_CONTROL("LEFT_CONTROL", GLFW.GLFW_KEY_LEFT_CONTROL),
    KEY_LEFT_ALT("LEFT_ALT", GLFW.GLFW_KEY_LEFT_ALT),
    KEY_RIGHT_SHIFT("RIGHT_SHIFT", GLFW.GLFW_KEY_RIGHT_SHIFT),
    KEY_RIGHT_CONTROL("RIGHT_CONTROL", GLFW.GLFW_KEY_RIGHT_CONTROL),
    KEY_RIGHT_ALT("RIGHT_ALT", GLFW.GLFW_KEY_RIGHT_ALT),

    MOUSE_1("MOUSE1", GLFW.GLFW_MOUSE_BUTTON_1),
    MOUSE_2("MOUSE2", GLFW.GLFW_MOUSE_BUTTON_2),
    MOUSE_3("MOUSE3", GLFW.GLFW_MOUSE_BUTTON_3),
    MOUSE_4("MOUSE4", GLFW.GLFW_MOUSE_BUTTON_4),
    MOUSE_5("MOUSE5", GLFW.GLFW_MOUSE_BUTTON_5),
    KEY_NONE("", GLFW.GLFW_KEY_UNKNOWN);

    public final String name;
    public final int keyCode;

    private static final Map<Integer, Keyboard> BY_CODE = new HashMap<>();
    private static final Map<String, Keyboard> BY_NAME = new HashMap<>();

    static {
        for (Keyboard key : values()) {
            BY_CODE.put(key.keyCode, key);
            BY_NAME.put(key.name.toLowerCase(), key);
        }
    }

    @Override
    public String toString() {
        return name;
    }

    public static String getKeyName(int keyCode) {
        return BY_CODE.getOrDefault(keyCode, KEY_NONE).name;
    }

    public static int getKeyCode(String keyName) {
        return BY_NAME.getOrDefault(keyName.toLowerCase(), KEY_NONE).keyCode;
    }

    public static boolean isKeyDown(int keyCode) {

        return InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), keyCode);
    }
}
