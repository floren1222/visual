package zenith.zov.utility.render.display.shader;

import com.mojang.blaze3d.systems.RenderSystem;
import net.minecraft.client.gl.*;
import net.minecraft.client.render.RenderPhase;
import net.minecraft.client.render.VertexFormat;
import net.minecraft.util.Identifier;
import org.jetbrains.annotations.ApiStatus;
import zenith.zov.utility.interfaces.IMinecraft;
import zenith.zov.utility.mixin.accessors.ShaderProgramAccessor;

import java.util.ArrayList;
import java.util.List;

public class GlProgram implements IMinecraft {

    private static final List<Runnable> REGISTERED_PROGRAMS = new ArrayList<>();

    /**
     * The actual Minecraft shader program
     * which is represented and wrapped by this
     * GlProgram instance
     */
    protected ShaderProgram backingProgram;

    protected ShaderProgramKey programKey;

    public GlProgram(Identifier id, VertexFormat vertexFormat) {
        this.programKey = new ShaderProgramKey(id.withPrefixedPath("core/"), vertexFormat, Defines.EMPTY);

        REGISTERED_PROGRAMS.add(
                () -> {
                    try {
                        this.backingProgram = mc.getShaderLoader().getProgramToLoad(programKey);
                        this.setup();
                    } catch (ShaderLoader.LoadException e) {
                        //throw new RuntimeException("Failed to initialize shader program", e);
                    }
                }
        );
    }

    public RenderPhase renderPhaseProgram() {
        return new RenderPhase.ShaderProgram(programKey);
    }

    /**
     * Bind this program and execute
     * potential preparation work
     * <p>
     * <b>Note:</b> Custom implementations may very well have
     * additional setup methods that must be run prior to
     * invoking {@code use()}
     */
    public ShaderProgram use() {
        return RenderSystem.setShader(programKey);
    }

    protected void setup() {}

    /**
     * Get the {@link GlUniform} generated by the game for
     * the uniform of the given name
     *
     * @return The corresponding {@link GlUniform} instance for updating
     * the value of the uniform, or {@code null} if no such uniform exists
     */
    public GlUniform findUniform(String name) {
        return ((ShaderProgramAccessor) this.backingProgram).getUniformsByName().get(name);
    }

    @ApiStatus.Internal
    public static void loadAndSetupPrograms() {
        REGISTERED_PROGRAMS.forEach(Runnable::run);
    }
}